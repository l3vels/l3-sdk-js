/* tslint:disable */
/* eslint-disable */
/**
 * L3vels Api
 * L3vels API for Game developers
 *
 * The version of the OpenAPI document: 0.2
 * Contact: support@l3vels.xyz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface MintBatchDto
 */
export interface MintBatchDto {
    /**
     * Project Id
     * @type {string}
     * @memberof MintBatchDto
     */
    projectId: string;
    /**
     * Collection Id
     * @type {string}
     * @memberof MintBatchDto
     */
    collectionId: string;
    /**
     * Player address to mint token to
     * @type {string}
     * @memberof MintBatchDto
     */
    playerAddress: string;
    /**
     * Player ID to mint to. You can provide this or player_address
     * @type {string}
     * @memberof MintBatchDto
     */
    playerId: string;
    /**
     * Array of tokens to mint
     * @type {Array<string>}
     * @memberof MintBatchDto
     */
    assets: Array<string>;
}

/**
 * Check if a given object implements the MintBatchDto interface.
 */
export function instanceOfMintBatchDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "projectId" in value;
    isInstance = isInstance && "collectionId" in value;
    isInstance = isInstance && "playerAddress" in value;
    isInstance = isInstance && "playerId" in value;
    isInstance = isInstance && "assets" in value;

    return isInstance;
}

export function MintBatchDtoFromJSON(json: any): MintBatchDto {
    return MintBatchDtoFromJSONTyped(json, false);
}

export function MintBatchDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): MintBatchDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'projectId': json['project_id'],
        'collectionId': json['collection_id'],
        'playerAddress': json['player_address'],
        'playerId': json['player_id'],
        'assets': json['assets'],
    };
}

export function MintBatchDtoToJSON(value?: MintBatchDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'project_id': value.projectId,
        'collection_id': value.collectionId,
        'player_address': value.playerAddress,
        'player_id': value.playerId,
        'assets': value.assets,
    };
}

