/* tslint:disable */
/* eslint-disable */
/**
 * L3vels Api
 * L3vels API for Game developers
 *
 * The version of the OpenAPI document: 0.2
 * Contact: support@l3vels.xyz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Asset
 */
export interface Asset {
    /**
     * The unique identifier for the asset entity.
     * @type {string}
     * @memberof Asset
     */
    id: string;
    /**
     * The token id of the asset.
     * @type {number}
     * @memberof Asset
     */
    tokenId: number;
    /**
     * The name of the asset.
     * @type {string}
     * @memberof Asset
     */
    name: string;
    /**
     * ID of the parent asset.
     * @type {string}
     * @memberof Asset
     */
    parentId: string;
    /**
     * Custom properties of the asset.
     * @type {object}
     * @memberof Asset
     */
    properties: object;
    /**
     * Custom attributes of the asset.
     * @type {object}
     * @memberof Asset
     */
    attributes: object;
    /**
     * The description of the asset.
     * @type {string}
     * @memberof Asset
     */
    description: string;
    /**
     * The status of the asset.
     * @type {string}
     * @memberof Asset
     */
    status: string;
    /**
     * The price of the asset.
     * @type {number}
     * @memberof Asset
     */
    price: number;
    /**
     * The supply of the asset.
     * @type {number}
     * @memberof Asset
     */
    supply: number;
    /**
     * The minted amount of the asset.
     * @type {number}
     * @memberof Asset
     */
    mintedAmount: number;
    /**
     * The asset type. Can be main or nested.
     * @type {string}
     * @memberof Asset
     */
    assetType: string;
    /**
     * The asset URL.
     * @type {string}
     * @memberof Asset
     */
    assetUrl: string;
    /**
     * Additional images associated with the asset, such as screenshots or promotional images.
     * @type {Array<string>}
     * @memberof Asset
     */
    medias: Array<string>;
    /**
     * The main or featured image associated with the asset. You can set it from the Dashboard as main image.
     * @type {string}
     * @memberof Asset
     */
    mainMedia: string;
    /**
     * The unique identifier of the account that the Collection belongs to.
     * @type {number}
     * @memberof Asset
     */
    accountId: number;
    /**
     * The unique identifier of the project that the asset is associated with. This allows developers to organize their assets by project and helps with tracking and reporting.
     * @type {string}
     * @memberof Asset
     */
    projectId: string;
    /**
     * The unique identifier of the collection that the asset is associated with. This allows developers to organize their collections by project and helps with tracking and reporting.
     * @type {string}
     * @memberof Asset
     */
    collectionId: string;
    /**
     * The date when the collection was created.
     * @type {Date}
     * @memberof Asset
     */
    createdOn: Date;
    /**
     * The date when the collection was last modified.
     * @type {Date}
     * @memberof Asset
     */
    modifiedOn: Date;
    /**
     * The Id of the user who created the collection.
     * @type {number}
     * @memberof Asset
     */
    createdBy: number;
    /**
     * The Id of the user who last modified the collection.
     * @type {number}
     * @memberof Asset
     */
    modifiedBy: number;
}

/**
 * Check if a given object implements the Asset interface.
 */
export function instanceOfAsset(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "tokenId" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "parentId" in value;
    isInstance = isInstance && "properties" in value;
    isInstance = isInstance && "attributes" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "price" in value;
    isInstance = isInstance && "supply" in value;
    isInstance = isInstance && "mintedAmount" in value;
    isInstance = isInstance && "assetType" in value;
    isInstance = isInstance && "assetUrl" in value;
    isInstance = isInstance && "medias" in value;
    isInstance = isInstance && "mainMedia" in value;
    isInstance = isInstance && "accountId" in value;
    isInstance = isInstance && "projectId" in value;
    isInstance = isInstance && "collectionId" in value;
    isInstance = isInstance && "createdOn" in value;
    isInstance = isInstance && "modifiedOn" in value;
    isInstance = isInstance && "createdBy" in value;
    isInstance = isInstance && "modifiedBy" in value;

    return isInstance;
}

export function AssetFromJSON(json: any): Asset {
    return AssetFromJSONTyped(json, false);
}

export function AssetFromJSONTyped(json: any, ignoreDiscriminator: boolean): Asset {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'tokenId': json['token_id'],
        'name': json['name'],
        'parentId': json['parent_id'],
        'properties': json['properties'],
        'attributes': json['attributes'],
        'description': json['description'],
        'status': json['status'],
        'price': json['price'],
        'supply': json['supply'],
        'mintedAmount': json['minted_amount'],
        'assetType': json['asset_type'],
        'assetUrl': json['asset_url'],
        'medias': json['medias'],
        'mainMedia': json['main_media'],
        'accountId': json['account_id'],
        'projectId': json['project_id'],
        'collectionId': json['collection_id'],
        'createdOn': (new Date(json['created_on'])),
        'modifiedOn': (new Date(json['modified_on'])),
        'createdBy': json['created_by'],
        'modifiedBy': json['modified_by'],
    };
}

export function AssetToJSON(value?: Asset | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'token_id': value.tokenId,
        'name': value.name,
        'parent_id': value.parentId,
        'properties': value.properties,
        'attributes': value.attributes,
        'description': value.description,
        'status': value.status,
        'price': value.price,
        'supply': value.supply,
        'minted_amount': value.mintedAmount,
        'asset_type': value.assetType,
        'asset_url': value.assetUrl,
        'medias': value.medias,
        'main_media': value.mainMedia,
        'account_id': value.accountId,
        'project_id': value.projectId,
        'collection_id': value.collectionId,
        'created_on': (value.createdOn.toISOString()),
        'modified_on': (value.modifiedOn.toISOString()),
        'created_by': value.createdBy,
        'modified_by': value.modifiedBy,
    };
}

