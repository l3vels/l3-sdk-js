/**
 * L3vels Api
 * L3vels API for Game developers
 *
 * OpenAPI spec version: 0.3
 * Contact: support@l3vels.xyz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../http/http';

export class Transaction {
    /**
    * The unique identifier for the transaction entity.
    */
    'id': string;
    /**
    * Transaction status in Blockchain. Can be pending, success or fail
    */
    'status': string;
    /**
    * Address of the sender of the transaction.
    */
    '_from': string;
    /**
    * Address of the receiver of the transaction. It can be contract address or player address if it is a transfer transaction.
    */
    'to': string;
    /**
    * Contract ID the transaction is associated with.
    */
    'contractId': string;
    /**
    * Contract address where the transaction happened.
    */
    'contractAddress': string;
    /**
    * Main blockchain identifier: Ethereum, Polygon, etc.
    */
    'blockchain': string;
    /**
    * Chain name identifier: Ethereum, Goerli, Sepolia, PolygonPoS, etc.
    */
    'chainName': string;
    /**
    * Chain ID: 1 for Ethereum, 5 for Goerli, 80001 for Polygon Mumbai, etc.
    */
    'chainId': number;
    /**
    * Chain environment: Testnet, Mainnet, etc.
    */
    'environment': string;
    /**
    * Unique transaction hash in the blockchain.
    */
    'transactionHash': string;
    /**
    * Unique block number in the blockchain.
    */
    'blockNumber': number;
    /**
    * Transaction type: Mint, Transfer, Award, Airdrop, etc.
    */
    'type': string;
    /**
    * Function method name that was called in smart contract
    */
    'method': string;
    /**
    * List of events that were emitted in the transaction
    */
    'events': Array<string>;
    /**
    * The unique identifier of the game that the transaction is associated with. This allows developers to organize their transactions by game and helps with tracking and reporting.
    */
    'gameId': string;
    /**
    * The unique identifier of the collection that the transaction is associated with. This allows developers to organize their transactions by game and helps with tracking and reporting.
    */
    'collectionId': string;
    /**
    * The unique identifier of the account that the transaction belongs to.
    */
    'accountId': string;
    /**
    * The date when the collection was created.
    */
    'createdOn': Date;
    /**
    * The date when the collection was last modified.
    */
    'modifiedOn': Date;
    /**
    * The Id of the user who created the collection.
    */
    'createdBy': string;
    /**
    * The Id of the user who last modified the collection.
    */
    'modifiedBy': string;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string",
            "format": ""
        },
        {
            "name": "_from",
            "baseName": "from",
            "type": "string",
            "format": ""
        },
        {
            "name": "to",
            "baseName": "to",
            "type": "string",
            "format": ""
        },
        {
            "name": "contractId",
            "baseName": "contract_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "contractAddress",
            "baseName": "contract_address",
            "type": "string",
            "format": ""
        },
        {
            "name": "blockchain",
            "baseName": "blockchain",
            "type": "string",
            "format": ""
        },
        {
            "name": "chainName",
            "baseName": "chain_name",
            "type": "string",
            "format": ""
        },
        {
            "name": "chainId",
            "baseName": "chain_id",
            "type": "number",
            "format": ""
        },
        {
            "name": "environment",
            "baseName": "environment",
            "type": "string",
            "format": ""
        },
        {
            "name": "transactionHash",
            "baseName": "transaction_hash",
            "type": "string",
            "format": ""
        },
        {
            "name": "blockNumber",
            "baseName": "block_number",
            "type": "number",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        },
        {
            "name": "method",
            "baseName": "method",
            "type": "string",
            "format": ""
        },
        {
            "name": "events",
            "baseName": "events",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "gameId",
            "baseName": "game_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "collectionId",
            "baseName": "collection_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "accountId",
            "baseName": "account_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "createdOn",
            "baseName": "created_on",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "modifiedOn",
            "baseName": "modified_on",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "createdBy",
            "baseName": "created_by",
            "type": "string",
            "format": ""
        },
        {
            "name": "modifiedBy",
            "baseName": "modified_by",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return Transaction.attributeTypeMap;
    }

    public constructor() {
    }
}

