/* tslint:disable */
/* eslint-disable */
/**
 * L3vels Api
 * L3vels API for Game developers
 *
 * The version of the OpenAPI document: 0.3
 * Contact: support@l3vels.xyz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreatePlayerInput,
  Player,
  PlayerAsset,
} from '../models';
import {
    CreatePlayerInputFromJSON,
    CreatePlayerInputToJSON,
    PlayerFromJSON,
    PlayerToJSON,
    PlayerAssetFromJSON,
    PlayerAssetToJSON,
} from '../models';

export interface CountPlayersByGameIdRequest {
    authorization: string;
    gameId: string;
}

export interface CreatePlayerRequest {
    authorization: string;
    createPlayerInput: CreatePlayerInput;
}

export interface GetPlayerAssetByIdRequest {
    authorization: string;
    id: string;
    gameId: string;
}

export interface GetPlayerByIdRequest {
    authorization: string;
    id: string;
    gameId: string;
}

export interface GetPlayersRequest {
    authorization: string;
    gameId: string;
    sort?: string;
    order?: string;
    searchText?: string;
    limit?: number;
    page?: number;
}

export interface PlayerAssetsRequest {
    authorization: string;
    gameId: string;
    assetId?: string;
    playerId?: string;
    sort?: string;
    order?: string;
    limit?: number;
    page?: number;
}

export interface UpdatePlayerRequest {
    authorization: string;
}

/**
 * 
 */
export class PlayerApi extends runtime.BaseAPI {

    /**
     * Count players in game. Example: count players in game Call of Duty.
     * Count players
     */
    async countPlayersByGameIdRaw(requestParameters: CountPlayersByGameIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling countPlayersByGameId.');
        }

        if (requestParameters.gameId === null || requestParameters.gameId === undefined) {
            throw new runtime.RequiredError('gameId','Required parameter requestParameters.gameId was null or undefined when calling countPlayersByGameId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/v1/player/count/{game_id}`.replace(`{${"game_id"}}`, encodeURIComponent(String(requestParameters.gameId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Count players in game. Example: count players in game Call of Duty.
     * Count players
     */
    async countPlayersByGameId(requestParameters: CountPlayersByGameIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.countPlayersByGameIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create new player for Game. Example: Create new player Jack in game Call of Duty.
     * Create new player
     */
    async createPlayerRaw(requestParameters: CreatePlayerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Player>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling createPlayer.');
        }

        if (requestParameters.createPlayerInput === null || requestParameters.createPlayerInput === undefined) {
            throw new runtime.RequiredError('createPlayerInput','Required parameter requestParameters.createPlayerInput was null or undefined when calling createPlayer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/v1/player`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePlayerInputToJSON(requestParameters.createPlayerInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlayerFromJSON(jsonValue));
    }

    /**
     * Create new player for Game. Example: Create new player Jack in game Call of Duty.
     * Create new player
     */
    async createPlayer(requestParameters: CreatePlayerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Player> {
        const response = await this.createPlayerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve player asset by ID. Player asset represents a single asset that a player owns. It has amount field that represents how many of this asset player owns.
     * Retrieve player asset by ID
     */
    async getPlayerAssetByIdRaw(requestParameters: GetPlayerAssetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlayerAsset>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getPlayerAssetById.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPlayerAssetById.');
        }

        if (requestParameters.gameId === null || requestParameters.gameId === undefined) {
            throw new runtime.RequiredError('gameId','Required parameter requestParameters.gameId was null or undefined when calling getPlayerAssetById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/v1/player-asset/{game_id}/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"game_id"}}`, encodeURIComponent(String(requestParameters.gameId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlayerAssetFromJSON(jsonValue));
    }

    /**
     * Retrieve player asset by ID. Player asset represents a single asset that a player owns. It has amount field that represents how many of this asset player owns.
     * Retrieve player asset by ID
     */
    async getPlayerAssetById(requestParameters: GetPlayerAssetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlayerAsset> {
        const response = await this.getPlayerAssetByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a specific player by ID associated with Game. Example: retrieve player Jack from game Call of Duty.
     * Retrieve player by ID
     */
    async getPlayerByIdRaw(requestParameters: GetPlayerByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Player>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getPlayerById.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPlayerById.');
        }

        if (requestParameters.gameId === null || requestParameters.gameId === undefined) {
            throw new runtime.RequiredError('gameId','Required parameter requestParameters.gameId was null or undefined when calling getPlayerById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/v1/player/{game_id}/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"game_id"}}`, encodeURIComponent(String(requestParameters.gameId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlayerFromJSON(jsonValue));
    }

    /**
     * Retrieves a specific player by ID associated with Game. Example: retrieve player Jack from game Call of Duty.
     * Retrieve player by ID
     */
    async getPlayerById(requestParameters: GetPlayerByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Player> {
        const response = await this.getPlayerByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of players that match the specified filter criteria. Developers can use this method to retrieve players by name, category, status, or other properties. Example: Retrieve players from game Call of Duty.
     * Retrieve players
     */
    async getPlayersRaw(requestParameters: GetPlayersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Player>>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getPlayers.');
        }

        if (requestParameters.gameId === null || requestParameters.gameId === undefined) {
            throw new runtime.RequiredError('gameId','Required parameter requestParameters.gameId was null or undefined when calling getPlayers.');
        }

        const queryParameters: any = {};

        if (requestParameters.gameId !== undefined) {
            queryParameters['game_id'] = requestParameters.gameId;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.searchText !== undefined) {
            queryParameters['search_text'] = requestParameters.searchText;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/v1/player`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PlayerFromJSON));
    }

    /**
     * Retrieve a list of players that match the specified filter criteria. Developers can use this method to retrieve players by name, category, status, or other properties. Example: Retrieve players from game Call of Duty.
     * Retrieve players
     */
    async getPlayers(requestParameters: GetPlayersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Player>> {
        const response = await this.getPlayersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API method retrieves a list of Player assets that match the specified filter criteria. Developers can use this method to retrieve Player assets by player, Game or other properties.
     * Retrieve player assets
     */
    async playerAssetsRaw(requestParameters: PlayerAssetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PlayerAsset>>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling playerAssets.');
        }

        if (requestParameters.gameId === null || requestParameters.gameId === undefined) {
            throw new runtime.RequiredError('gameId','Required parameter requestParameters.gameId was null or undefined when calling playerAssets.');
        }

        const queryParameters: any = {};

        if (requestParameters.gameId !== undefined) {
            queryParameters['game_id'] = requestParameters.gameId;
        }

        if (requestParameters.assetId !== undefined) {
            queryParameters['asset_id'] = requestParameters.assetId;
        }

        if (requestParameters.playerId !== undefined) {
            queryParameters['player_id'] = requestParameters.playerId;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/v1/player-asset`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PlayerAssetFromJSON));
    }

    /**
     * This API method retrieves a list of Player assets that match the specified filter criteria. Developers can use this method to retrieve Player assets by player, Game or other properties.
     * Retrieve player assets
     */
    async playerAssets(requestParameters: PlayerAssetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PlayerAsset>> {
        const response = await this.playerAssetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API method allows developers to update an existing Player by providing the ID of the Player and the updated properties and associated assets.
     * Update an existing Player
     */
    async updatePlayerRaw(requestParameters: UpdatePlayerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Player>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling updatePlayer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/v1/player`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlayerFromJSON(jsonValue));
    }

    /**
     * This API method allows developers to update an existing Player by providing the ID of the Player and the updated properties and associated assets.
     * Update an existing Player
     */
    async updatePlayer(requestParameters: UpdatePlayerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Player> {
        const response = await this.updatePlayerRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
