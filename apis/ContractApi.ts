/* tslint:disable */
/* eslint-disable */
/**
 * L3vels Api
 * L3vels API for Game developers
 *
 * The version of the OpenAPI document: 0.3
 * Contact: support@l3vels.xyz
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  SetContractUriInput,
  SetSaleStatusInput,
} from '../models';
import {
    SetContractUriInputFromJSON,
    SetContractUriInputToJSON,
    SetSaleStatusInputFromJSON,
    SetSaleStatusInputToJSON,
} from '../models';

export interface CountContractsByGameIdRequest {
    authorization: string;
    collectionId: string;
    gameId: string;
}

export interface GetContractURIRequest {
    authorization: string;
    collectionId: string;
    gameId: string;
}

export interface SetContractURIRequest {
    authorization: string;
    setContractUriInput: SetContractUriInput;
}

export interface UpdateSaleStatusRequest {
    authorization: string;
    setSaleStatusInput: SetSaleStatusInput;
}

/**
 * 
 */
export class ContractApi extends runtime.BaseAPI {

    /**
     * Count total contract in game.
     * Collection size
     */
    async countContractsByGameIdRaw(requestParameters: CountContractsByGameIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling countContractsByGameId.');
        }

        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling countContractsByGameId.');
        }

        if (requestParameters.gameId === null || requestParameters.gameId === undefined) {
            throw new runtime.RequiredError('gameId','Required parameter requestParameters.gameId was null or undefined when calling countContractsByGameId.');
        }

        const queryParameters: any = {};

        if (requestParameters.collectionId !== undefined) {
            queryParameters['collection_id'] = requestParameters.collectionId;
        }

        if (requestParameters.gameId !== undefined) {
            queryParameters['game_id'] = requestParameters.gameId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/v1/contract/collection-size`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Count total contract in game.
     * Collection size
     */
    async countContractsByGameId(requestParameters: CountContractsByGameIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.countContractsByGameIdRaw(requestParameters, initOverrides);
    }

    /**
     * Gets contract uri of contract
     * Get Contract URI
     */
    async getContractURIRaw(requestParameters: GetContractURIRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getContractURI.');
        }

        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling getContractURI.');
        }

        if (requestParameters.gameId === null || requestParameters.gameId === undefined) {
            throw new runtime.RequiredError('gameId','Required parameter requestParameters.gameId was null or undefined when calling getContractURI.');
        }

        const queryParameters: any = {};

        if (requestParameters.collectionId !== undefined) {
            queryParameters['collection_id'] = requestParameters.collectionId;
        }

        if (requestParameters.gameId !== undefined) {
            queryParameters['game_id'] = requestParameters.gameId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/v1/contract/contract-uri`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Gets contract uri of contract
     * Get Contract URI
     */
    async getContractURI(requestParameters: GetContractURIRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getContractURIRaw(requestParameters, initOverrides);
    }

    /**
     * Update Contract URI
     * Update Contract URI
     */
    async setContractURIRaw(requestParameters: SetContractURIRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling setContractURI.');
        }

        if (requestParameters.setContractUriInput === null || requestParameters.setContractUriInput === undefined) {
            throw new runtime.RequiredError('setContractUriInput','Required parameter requestParameters.setContractUriInput was null or undefined when calling setContractURI.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/v1/contract/contract-uri`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SetContractUriInputToJSON(requestParameters.setContractUriInput),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Contract URI
     * Update Contract URI
     */
    async setContractURI(requestParameters: SetContractURIRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.setContractURIRaw(requestParameters, initOverrides);
    }

    /**
     * Update Sale status to PAUSED, PRE_SALE or PUBLIC
     * Update Sale status
     */
    async updateSaleStatusRaw(requestParameters: UpdateSaleStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling updateSaleStatus.');
        }

        if (requestParameters.setSaleStatusInput === null || requestParameters.setSaleStatusInput === undefined) {
            throw new runtime.RequiredError('setSaleStatusInput','Required parameter requestParameters.setSaleStatusInput was null or undefined when calling updateSaleStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/v1/contract/sale-status`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SetSaleStatusInputToJSON(requestParameters.setSaleStatusInput),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update Sale status to PAUSED, PRE_SALE or PUBLIC
     * Update Sale status
     */
    async updateSaleStatus(requestParameters: UpdateSaleStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateSaleStatusRaw(requestParameters, initOverrides);
    }

}
